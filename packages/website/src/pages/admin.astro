---
import type { CMS as CMSType } from 'decap-cms-core';
import BaseLayout from '@/layouts/base.layout.astro';

// (1) we need to inject these stuff for @react-refresh manually,
//     despite this being a job of the @astro/react integration
import react from '@vitejs/plugin-react';
const FAST_REFRESH_PREAMBLE = react.preambleCode;

// force trailing slash
if (Astro.url.pathname === '/admin') {
  return Astro.redirect('/admin/');
}

declare global {
  interface Window {
    CMS: CMSType;
    CMS_MANUAL_INIT: boolean;

    // we need to inject these stuff for @react-refresh manually,
    // despite this being a job of the @astro/react integration
    $RefreshReg$: () => any;
    $RefreshSig$: () => (type: any) => any;
    __vite_plugin_react_preamble_installed__: boolean;
  }
}

export const prerender = true;
---

<BaseLayout pageTitle="Administration">
  <meta slot="head" name="robots" content="noindex" />
  <style is:global slot="head">
    @import url(../integrations/densed-form.styles.css);
  </style>

  <script is:inline slot="head" type="module" define:vars={{ FAST_REFRESH_PREAMBLE }}>
    // (2) as the preamble code is evaluated with new Function(), the import statement
    //     needs to be removed, imported manually, and injected back as argument
    import RefreshRuntime from '/@react-refresh';
    const preamble = FAST_REFRESH_PREAMBLE.replace(/import .*\n/, '');
    new Function('RefreshRuntime', preamble)(RefreshRuntime);
  </script>

  <script>
    window.CMS_MANUAL_INIT = true;

    import type { CollectionEntry } from 'astro:content';
    import CMS from 'decap-cms-app';
    import { createElement as h, useEffect, useState } from 'react';
    import { config } from '../../decap.config.js';
    import { CmsPreview } from '@/components/cms-preview.component.jsx';
    import { Navigation } from '@/components/navigation.component.jsx';
    import { Page } from '@/components/page.component.jsx';
    import { prepareItems, type NavigationItem } from '@/utils/navigation.utils';

    // reduce the noise in the console
    // https://github.com/facebook/react/issues/5632
    const { error } = console;
    console.error = (s, ...args) => {
      if (typeof s === 'string' && s.startsWith('Warning: ')) {
        return console.warn(s, ...args);
      }
      return error(s, ...args);
    };

    // load ui components from dev server in development
    const uiRoot = import.meta.env.MODE === 'development' ? 'http://localhost:3500' : '/ui';
    const uiData = await fetch(`${uiRoot}/index.js`).then(res => res.text());
    const uiSrc = URL.createObjectURL(new Blob([uiData], { type: 'text/javascript' }));

    // initialize the CMS
    CMS.init({ config });

    // add preview styles
    CMS.registerPreviewStyle(`${uiRoot}/fonts.css`);
    CMS.registerPreviewStyle(`${uiRoot}/globals.css`);

    // inline some adhoc styles
    const styles = `
      body {
        margin: 0;
        font-family: var(--kvlm-font-family-body);
        background: repeating-conic-gradient(#dfdfe3 0% 25%, transparent 0% 50%) 50%;
        background-position: 0 0;
        background-size: 20px 20px;
      }
    `;
    CMS.registerPreviewStyle(styles, { raw: true });

    // register our previews, wrapped in a mapping convenience component
    CMS.registerPreviewTemplate('mainNavigation', ({ entry, getCollection }) => {
      const [items, setItems] = useState([] as NavigationItem[]);

      useEffect(() => {
        const { data } = entry.toJS() as CollectionEntry<'navigation'>;
        prepareItems(data.pages, async slug => {
          const collection = await getCollection('pages', slug);
          return { slug, data: (collection as any).first() } as CollectionEntry<'pages'>;
        }).then(setItems);
      }, [entry]);

      return h(
        CmsPreview,
        { uiSrc },
        h('kvlm-layout', null, h(Navigation, { items, slot: 'header' })),
      );
    });

    CMS.registerPreviewTemplate('pages', ({ entry }) => {
      const { data, slug } = entry.toJS() as CollectionEntry<'pages'>;
      return h(
        CmsPreview,
        { uiSrc },
        h('kvlm-layout', null, [
          h('div', { style: { height: 'var(---kvlm-layout-header-offset)' } }),
          h(Page, { data, slug }),
        ]),
      );
    });

    CMS.registerPreviewTemplate('chronicle', ({ entry }) => {
      const { data } = entry.toJS() as CollectionEntry<'chronicle'>;
      const { body, date, title } = data;
      return h(
        CmsPreview,
        { uiSrc },
        h('kvlm-layout', { style: { 'container-type': 'inline-size' } }, [
          h('div', { style: { height: 'var(---kvlm-layout-header-offset)' } }),
          h(
            'kvlm-section',
            null,
            h(
              'kvlm-timeline',
              null,
              h('kvlm-timeline-item', { date, title, leading: true, trailing: true }, body),
            ),
          ),
        ]),
      );
    });
  </script>
</BaseLayout>
