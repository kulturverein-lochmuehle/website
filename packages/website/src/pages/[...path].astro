---
import type { GetStaticPaths, GetStaticPathsItem } from 'astro';
import { getEntry } from 'astro:content';

import DefaultLayout from '@/layouts/default.layout.astro';
import { getCollectionParams } from '@/utils/collection.utils.js';

import { Navigation } from '@/components/navigation.component.jsx';
import { Page } from '@/components/page.component.jsx';

async function getDefaultRoute(): Promise<string> {
  const { data } = await getEntry('navigation', 'main');
  const [{ page, useSections }] = data.pages;
  if (!useSections) return page;

  const sectioned = await getEntry('pages', page);
  if (sectioned === undefined) return page;

  const slug = sectioned.data.blocks[0]?.slug;
  if (slug === undefined) return page;

  return `/${page}/${slug}`;
}

export const prerender = true;
export const getStaticPaths: GetStaticPaths = async () => {
  const toPathItem = (route: string): GetStaticPathsItem => ({ params: { path: route } });
  const { data } = await getEntry('navigation', 'main');

  return data.pages.reduce(
    async (all, { page, useSections }) => {
      const items = await all;
      const unsectioned = [...items, toPathItem(page)];
      if (!useSections) return unsectioned;

      const sectioned = await getEntry('pages', page);
      if (sectioned === undefined) return unsectioned;

      const slugs = sectioned.data.blocks.map(({ slug }) => slug);
      const withSections = slugs.map(slug => toPathItem([page, slug].join('/')));

      return items.concat(withSections);
    },
    Promise.resolve([toPathItem('/')] as GetStaticPathsItem[]),
  );
};

const { slug, isAdmin } = getCollectionParams(Astro.params.path as string);

// no slug, no problem - redirect to the first page
if (slug === undefined) {
  const route = await getDefaultRoute();
  console.log(`Redirecting to ${route}`);
  return Astro.redirect(route);
}

const page = await getEntry('pages', slug);
const navigation = await getEntry('navigation', 'main');

// check if collection and page exists and, due to browsers
// looking up some convenient files, handle requests with a 404
// https://github.com/withastro/astro/issues/6565#issuecomment-1477236472
// https://docs.astro.build/en/guides/server-side-rendering/#response
if (page === undefined) {
  return new Response(null, {
    status: 404,
    statusText: 'Not found',
  });
}
---

<DefaultLayout pageTitle={page.data?.title} observeScroll={!isAdmin}>
  {
    navigation && (
      <Navigation
        {...navigation}
        client:only="react"
        slot="header"
        slug={Astro.params.path as string}
      />
    )
  }
  <Page {...page} client:load />
</DefaultLayout>
