@use 'sass:list' as list;
@use 'sass:map' as map;
@use 'sass:meta' as meta;
@use 'sass:string' as string;

@use '@/styles/functions/implode.function.scss' as *;
@use '@/styles/variables/breakpoint.variables.scss' as *;

// utility mixin to check breakpoints given to the mixin
@mixin _check-given-breakpoint($breakpoint, $name) {
  // check if $from is either numeric (custom) or a map key
  @if meta.type-of($breakpoint) != number and meta.type-of($breakpoint) != string {
    @error "The breakpoint for #{$name} (#{$breakpoint}) must be either a number or a valid map key (#{map.keys($breakpoints)}).";
  }
  // in case of a string, it must be a valid map key
  @if meta.type-of($breakpoint) == string and not map.has-key($breakpoints, $breakpoint) {
    @error "The breakpoint for #{$name} (#{$breakpoint}) does not exist.";
  }
}

@function _resolve-breakpoint($breakpoint) {
  @if meta.type-of($breakpoint) == number {
    @return $breakpoint;
  } @else {
    @return map.get($breakpoints, $breakpoint);
  }
}

/// Mixin for @container queries with a fallback to @media queries for elderly browsers.
/// For the container queries to work, a container name must be provided. In our case,
/// the root element defines the container name, which will be used by default.
///
/// @example Usage with a map key as parameter:
/// ```scss
/// .wrapper {
///     @include container(xs) {
///         font-size: rem(1.5);
///     }
/// }
/// ```
///
/// @example Usage with a custom breakpoint value as parameter:
/// ```scss
/// .wrapper {
///     @include container(960px) {
///         font-size: rem(1.5);
///     }
/// }
///
/// @example Usage with container name:
/// ```scss
/// .wrapper {
///     @include container(sm, layout) {
///         font-size: rem(1.5);
///     }
/// }
@mixin container($from: null, $until: null, $container-name: null) {
  // check that either $until or $from is set
  @if not $until and not $from {
    @error "Either $until or $from (the default) must be set.";
  }

  $conditions: [];
  // check breakpoints if given
  @if $from != null {
    @include _check-given-breakpoint($from, '$from');
    // determine the breakpoint value
    $breakpoint: _resolve-breakpoint($from);
    $conditions: list.append($conditions, '(min-width: #{$breakpoint})');
  }
  @if $until != null {
    @include _check-given-breakpoint($until, '$until');
    // determine the breakpoint value
    $breakpoint: _resolve-breakpoint($until);
    $conditions: list.append($conditions, '(max-width: #{$breakpoint - 1px})');
  }
  $condition: implode($conditions, ' and ');

  // use container queries if available
  @supports (container-type: inline-size) {
    // as @container is not recognized by dart-sass, we need to use the
    // escape syntax to access the variable, which will lead to vscode
    // scss validation errors (despite it being build and linted properly):
    // to turn this off, set `"scss.validate": false` in your settings.json

    @if $container-name == null {
      // container queries are not recognized by stylelint yet, as it is a bit outdated
      // TODO: update stylelint and remove the following line
      // stylelint-disable-next-line scss/at-rule-no-unknown
      @container #{$condition} {
        // pass the given mixin contents into the query
        @content;
      }
    } @else {
      // container queries are not recognized by stylelint yet, as it is a bit outdated
      // TODO: update stylelint and remove the following line
      // stylelint-disable-next-line scss/at-rule-no-unknown
      @container #{string.unquote($container-name)} #{$condition} {
        // pass the given mixin contents into the query
        @content;
      }
    }
  }

  // use media query as fallback
  @supports not (container-type: inline-size) {
    @media #{$condition} {
      // pass the given mixin contents into the query
      @content;
    }
  }
}
