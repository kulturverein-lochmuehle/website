---
import { getCollection } from 'astro:content';
import { getCollectionParams } from '@utils/collection.utils.js';

type NavigationItem = {
  label: string;
  href: string;
  active: boolean;
  inline: boolean;
};

type Props = {
  name: string;
};

const { path } = Astro.params;
const { name } = Astro.props;
const { collection, page, slug } = getCollectionParams(path);

// checks weather a given page slug should be linked inline or not, this depends on two things:
// first, the page slug must contain a slash which marks it as a section link,
// second, the page containing the section must be the current page already
function isLinkedInline(slug: string): boolean {
  const isSectionLink = slug.includes('/');
  const isCurrentPage = slug.startsWith(`${page}/`);
  return isSectionLink && isCurrentPage;
}

// prepare navigation items from collection pages
const pages = await getCollection(collection!);
const items = pages
  // filter pages that are not in navigation
  .filter(page => page.data.navigation?.includes(name))
  // sort pages
  .sort((a, b) => a.data.order - b.data.order)
  // build navigation items
  .reduce(
    (acc, page) => [
      ...acc,
      {
        inline: isLinkedInline(page.slug),
        active: page.slug === slug,
        href: `/${collection}/${page.slug}`,
        label: page.data.title
      }
    ],
    [] as NavigationItem[]
  );
---

<kvlm-navigation slot="header">
  {items.map(item => <kvlm-navigation-item {...item} />)}
</kvlm-navigation>
