---
import BaseLayout from '@layouts/base.layout.astro';
import type { CMS as CMSType } from 'decap-cms-core';
import type { createElement as CreateElement } from 'react';

// force trailing slash
if (Astro.url.pathname === '/admin') {
  return Astro.redirect('/admin/');
}

declare global {
  const h: typeof CreateElement;
  interface Window {
    CMS: CMSType;
  }
}
---

<style is:global>
  li[data-dragging] {
    opacity: 0.25;
  }
</style>

<BaseLayout pageTitle="Administration">
  <meta slot="head" name="robots" content="noindex" />
  <link slot="head" href="/admin/config.yml" type="text/yaml" rel="cms-config-url" />

  <script>
    import type { ContentEntryMap } from 'astro:content';
    import CMS from 'decap-cms-app';
    import { createElement } from 'react';
    import { CmsPreview } from '../components/cms-preview.component.jsx';
    import { Page } from '../components/page.component.jsx';
    import { registerStringTemplateFilter } from '../utils/decap.utils.js';
    import { UuidWidget } from '../widgets/decap-uuid.widget.jsx';
    import { patchEntryListing } from '../utils/react.utils.js';

    // must come before CMS.init()
    patchEntryListing<ContentEntryMap['verein']>();

    // reduce the noise in the console
    // https://github.com/facebook/react/issues/5632
    const { error } = console;
    console.error = (s, ...args) => {
      if (typeof s === 'string' && s.startsWith('Warning: ')) {
        return console.warn(s, ...args);
      }
      return error(s, ...args);
    };

    // load ui components from dev server in development
    const uiRoot = import.meta.env.MODE === 'development' ? 'http://localhost:3500' : '/ui';

    // add some custom string template filters for the summary
    registerStringTemplateFilter();
    // DecapCmsLibWidgets.stringTemplate.addFilter(/^md$/, (str: string) => {
    //   console.log({ str });
    //   return str.toUpperCase();
    // });

    // initialize the CMS
    CMS.init();

    // add custom widgets
    CMS.registerWidget('uuid', UuidWidget);

    // add preview styles
    CMS.registerPreviewStyle(`${uiRoot}/fonts.css`);
    CMS.registerPreviewStyle(`${uiRoot}/globals.css`);

    // inline some adhoc styles
    const style = `
      body {
        margin: 0;
        font-family: var(--kvlm-font-family-body);
      }
    `;
    const styleUrl = URL.createObjectURL(new Blob([style], { type: 'text/css' }));
    CMS.registerPreviewStyle(styleUrl);

    // register our page preview
    CMS.registerPreviewTemplate('pages', ({ entry }) => {
      const { data, slug } = entry.toJS();
      return createElement(CmsPreview, { uiRoot }, createElement(Page, { data, slug }));
    });
  </script>
</BaseLayout>
